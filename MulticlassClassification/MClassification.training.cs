// This file was auto-generated by ML.NET Model Builder.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace MulticlassClassification
{
    public partial class MClassification
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"Polish", @"Polish"),new InputOutputColumnPair(@"Symmetry", @"Symmetry"),new InputOutputColumnPair(@"Report", @"Report")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Carat Weight", @"Carat Weight"),new InputOutputColumnPair(@"Price", @"Price")}))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Color",outputColumnName:@"Color"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Clarity",outputColumnName:@"Clarity"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Polish",@"Symmetry",@"Report",@"Carat Weight",@"Price",@"Color",@"Clarity"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"Cut",inputColumnName:@"Cut"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=21,MinimumExampleCountPerLeaf=20,NumberOfTrees=81,MaximumBinCountPerFeature=164,FeatureFraction=0.993639289466286,LearningRate=0.999999776672986,LabelColumnName=@"Cut",FeatureColumnName=@"Features"}),labelColumnName: @"Cut"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
